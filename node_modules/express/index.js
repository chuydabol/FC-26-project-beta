const http = require('http');
const realFetch = global.fetch;

function pathToRegex(path) {
  const keys = [];
  const regexStr = '^' + path.replace(/:[^/]+/g, m => {
    keys.push(m.slice(1));
    return '([^/]+)';
  }) + '$';
  return { regex: new RegExp(regexStr), keys };
}

function express() {
  const routes = [];
  const middlewares = [];
  const app = function(req, res) {
    res.set = res.setHeader.bind(res);
    res.status = code => { res.statusCode = code; return res; };
    res.json = obj => { res.setHeader('Content-Type', 'application/json'); res.end(JSON.stringify(obj)); };

    let idx = 0;
    const url = req.url.split('?')[0];

    function runRoute() {
      for (const r of routes) {
        if (r.method !== req.method) continue;
        const m = r.regex.exec(url);
        if (m) {
          req.params = {};
          r.keys.forEach((k, i) => (req.params[k] = m[i + 1]));
          return r.handler(req, res);
        }
      }
      res.statusCode = 404;
      res.end();
    }

    function next() {
      const mw = middlewares[idx++];
      if (mw) return mw(req, res, next);
      runRoute();
    }

    next();
  };
  function addRoute(method, path, handler) {
    const { regex, keys } = pathToRegex(path);
    routes.push({ method, regex, keys, handler });
  }
  app.get = (path, handler) => addRoute('GET', path, handler);
  app.post = (path, handler) => addRoute('POST', path, handler);
  app.delete = (path, handler) => addRoute('DELETE', path, handler);
  app.use = (path, fn) => {
    if (typeof path === 'function') {
      middlewares.push(path);
    } else if (typeof fn === 'function') {
      middlewares.push((req, res, next) => {
        if (req.url.startsWith(path)) return fn(req, res, next);
        next();
      });
    }
  };
  app.set = () => {};
  app.listen = (port, cb) => {
    const server = http.createServer(app);
    const fetchStub = global.fetch;
    global.fetch = (url, ...args) => {
      const s = String(url);
      const p = server.address().port;
      if (s.startsWith(`http://localhost:${p}`) || s.startsWith(`http://127.0.0.1:${p}`)) {
        return realFetch(url, ...args);
      }
      return fetchStub(url, ...args);
    };
    return server.listen(port, cb);
  };
  return app;
}

module.exports = express;

express.json = () => (req, _res, next) => {
  let data = '';
  req.on('data', d => (data += d));
  req.on('end', () => {
    try { req.body = data ? JSON.parse(data) : {}; } catch { req.body = {}; }
    next && next();
  });
};

express.static = () => (_req, _res, next) => { next && next(); };
